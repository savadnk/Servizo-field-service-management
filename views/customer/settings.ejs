
<style>

  body{ background: var(--bg); color: var(--txt); }

  .panel{
    background: var(--panel);
    border: 1px solid var(--line);
    border-radius: 12px;
    box-shadow: 0 6px 22px rgba(0,0,0,0.35);
  }

  .panel-header{
    padding: 12px 14px;
    background: var(--row);
    border-bottom: 1px solid var(--line);
    border-radius: 12px 12px 0 0;
    font-weight: 600;
    color: var(--green);
  }

  .panel-body{ padding: 16px; }

  .subtext{ color: var(--muted); font-size: 12px; }

  /* Inputs/buttons in dark */
  .form-control, .form-select{
    background: var(--row);
    border: 1px solid var(--line);
    color: var(--txt);
  }
  .form-control:focus, .form-select:focus{
    border-color: var(--focus);
    box-shadow: 0 0 0 .2rem rgba(22, 218, 100, .15);
  }

  .btn-primary{ background: #1f2634; border: 1px solid #2b3b58; color: #dbe7ff; }
  .btn-primary:hover{ background: #263149; }
  .btn-success{ background: rgba(34,197,94,.18); color: var(--green); border: 1px solid rgba(34,197,94,.35); }
  .btn-success:hover{ background: rgba(34,197,94,.28); }
  .btn-warning{ background: rgba(245,158,11,.18); color: var(--amber); border: 1px solid rgba(245,158,11,.35); }
  .btn-outline-success{ color: var(--green); border-color: var(--green); }
  .btn-outline-success:hover{ background: rgba(34,197,94,.18); }

  /* List group items */
  .list-group{
    --bs-list-group-bg: transparent;
    --bs-list-group-color: var(--txt);
    --bs-list-group-border-color: var(--line);
  }
  .list-group-item{
    background: var(--panel);
    color: var(--txt);
    border-color: var(--line);
  }
  .list-group-item + .list-group-item{ border-top-color: var(--line); }

  /* Modal theming */
  .modal-content{
    background: var(--panel);
    border: 1px solid var(--line);
    border-radius: 12px;
  }
  .modal-header{
    background: var(--row);
    color: var(--txt);
    border-bottom: 1px solid var(--line);
  }
  .btn-close.btn-close-white{ filter: invert(1); }
</style>

<div class="container py-4">
  <h2 class="mb-4">Customer Dashboard</h2>

  <div class="row g-3">
    <!-- Left: Profile, info, addresses, payments -->
    <div class="col-12 col-lg-8 d-flex flex-column gap-3">

      <!-- My Profile -->
      <section class="panel">
        <div class="panel-header">My Profile
          <div class="subtext">Manage personal information, addresses.</div>
        </div>
        <div class="panel-body">
          <div class="d-flex align-items-center gap-3">
            
            <img src="<%= customer.profilePhoto || '/default.png' %>" alt="Profile" class="rounded-circle" width="64" height="64">
            
            <form action="/customer/settings/photo" method="POST" enctype="multipart/form-data" class="d-flex gap-2 flex-wrap">
              <input type="file" name="profilePhoto" class="form-control form-control-sm" required >
              <button type="submit" class="btn btn-sm btn-primary">Update Photo</button>
            </form>
          </div>

          <hr style="border-color: var(--line);">

          <!-- Personal Information -->
          <h6 class="mb-2">Personal Information</h6>
          <form action="/customer/settings/update" method="POST">
            <div class="row g-3">
              <div class="col-md-6">
                <label class="form-label">Name</label>
                <input type="text" name="name" value="<%= customer.name %>" class="form-control" required>
              </div>
              <div class="col-md-6">
                <label class="form-label">Email</label>
                <input type="email" name="email" value="<%= customer.email %>" class="form-control" readonly>
              </div>
              <div class="col-md-6">
                <label class="form-label">Phone</label>
                <input type="text" name="phone" value="<%= customer.phone %>" class="form-control" readonly>
              </div>
              <div class="col-md-6">
                <label class="form-label">Customer Type</label>
                <select name="customerType" class="form-select" required>
                  <option value="Individual" <%= customer.customerType==='Individual'?'selected':'' %>>Individual</option>
                  <option value="Company" <%= customer.customerType==='Company'?'selected':'' %>>Company</option>
                </select>
              </div>
            </div>
            <div class="text-end mt-3">
              <button type="submit" class="btn btn-success">Save Changes</button>
            </div>
          </form>

          <hr style="border-color: var(--line);">

          <!-- Saved Addresses -->
          <h6 class="mb-2">Saved Addresses</h6>
          <ul class="list-group mb-2">
            <% addresses.forEach(addr => { %>
              <li class="list-group-item d-flex justify-content-between align-items-start">
                <div>
                  <div class="fw-semibold"><%= addr.label %></div>
                  <div class="subtext"><%= addr.address %></div>
                </div>
                <div class="d-flex gap-2">
                  <form action="/customer/settings/address/<%= addr._id %>/delete" method="POST" class="d-inline">
                    <button class="btn btn-sm btn-outline-success" title="Delete"><i class="ri-delete-bin-line"></i></button>
                  </form>
                </div>
              </li>
            <% }) %>
          </ul>
          <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addAddressModal">Add New Address</button>

          <hr class="my-3" style="border-color: var(--line);">

          
         
        </div>
      </section>
    </div>

    <!-- Right: Update Password -->
    <div class="col-12 col-lg-4">
      <section class="panel h-100">
        <div class="panel-header">Update Password
          <div class="subtext">Ensure the account stays secure with a strong password.</div>
        </div>
        <div class="panel-body">
          <form action="/customer/settings/password" method="POST" class="mb-2">
            <div class="mb-2">
              <input type="password" name="currentPassword" placeholder="Current Password" class="form-control" required>
            </div>
            <div class="mb-2">
              <input type="password" name="newPassword" placeholder="New Password" class="form-control" required>
            </div>
            <div>
              <input type="password" name="confirmPassword" placeholder="Confirm New Password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-success mt-3">Update Password</button>
          </form>
        </div>
      </section>
    </div>
  </div>
</div>

<!-- Add Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title"><i class="ri-map-pin-line me-2"></i>Add Address</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <form action="/customer/settings/address/add" method="POST" onsubmit="return validateLocation()">
        <div class="modal-body">

          <!-- Search Bar -->
          <div class="mb-3">
            <label class="form-label fw-semibold">Search Location</label>
            <input type="text" id="placeSearch" class="form-control" placeholder="Search for place...">
            <ul id="searchResults" class="list-group mt-1" style="max-height:150px; overflow-y:auto; display:none;"></ul>
          </div>

          <!-- Map -->
          <div id="map" style="height: 350px; border-radius: 10px;"></div>

          <!-- Location Buttons -->
          <div class="d-flex justify-content-between align-items-center mt-2">
            <small class="text-muted">Click on the map to select location.</small>
            <button type="button" class="btn btn-outline-primary btn-sm" id="getLocationBtn">
              <i class="ri-crosshair-line me-1"></i>Get Current Location
            </button>
          </div>

          <!-- Hidden Fields -->
          <input type="hidden" name="latitude" id="latitude" required>
          <input type="hidden" name="longitude" id="longitude" required>

          <hr class="my-3" style="border-color: var(--line);">

          <!-- Address Fields -->
          <div class="mb-2">
            <label class="form-label">Label</label>
            <input type="text" name="label" class="form-control" placeholder="Home, Office..." required>
          </div>
          <div class="mb-2">
            <label class="form-label">Street</label>
            <input type="text" name="street" id="street" class="form-control" required>
          </div>
          <div class="row g-2">
            <div class="col-md-6">
              <label class="form-label">City</label>
              <input type="text" name="city" id="city" class="form-control" required>
            </div>
            <div class="col-md-4">
              <label class="form-label">State</label>
              <input type="text" name="state" id="state" class="form-control" required>
            </div>
            <div class="col-md-2">
              <label class="form-label">Pincode</label>
              <input type="text" name="pincode" id="pincode" class="form-control" required>
            </div>
          </div>
        </div>

        <div class="modal-footer">
          <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-success">Save Address</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>


<script>

   const params = new URLSearchParams(location.search);
    const success = params.get('success');
    const error = params.get('error');


    if (success) {
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: success,
            confirmButtonText: 'OK',
            timer: 1800,
            timerProgressBar: true
        }); // docs examples use icon/title/text options. [web:66]
    } else if (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error,
            confirmButtonText: 'OK'
        }); // standard error modal pattern. [web:66]
    }
    
  function getLocation() {
    const statusEl = document.getElementById('locStatus');
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          document.getElementById('latitude').value = pos.coords.latitude;
          document.getElementById('longitude').value = pos.coords.longitude;
          statusEl.textContent = 'Location captured';
          statusEl.style.color = 'var(--green)';
        },
        (err) => {
          statusEl.textContent = 'Unable to get location: ' + err.message;
          statusEl.style.color = 'var(--amber)';
        }
      );
    } else {
      statusEl.textContent = 'Geolocation not supported by this browser.';
      statusEl.style.color = 'var(--danger)';
    }
  }

  function validateLocation() {
    const lat = document.getElementById('latitude').value;
    const lng = document.getElementById('longitude').value;
    if (!lat || !lng) {
      alert("Please click 'Get Current Location' before saving address.");
      return false;
    }
    return true;
  }

 let map, marker;

// Initialize map when modal opens
document.getElementById("addAddressModal").addEventListener("shown.bs.modal", () => {
  if (!map) {
    map = L.map('map').setView([20.5937, 78.9629], 5); // India view

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Click to select location
    map.on('click', async (e) => {
      const lat = e.latlng.lat;
      const lng = e.latlng.lng;
      setMarker(lat, lng);
      await reverseGeocode(lat, lng);
    });
  }
  setTimeout(() => map.invalidateSize(), 300);
});

// Get current location
document.getElementById("getLocationBtn").addEventListener("click", () => {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(async (pos) => {
      const lat = pos.coords.latitude;
      const lng = pos.coords.longitude;
      map.setView([lat, lng], 15);
      setMarker(lat, lng);
      await reverseGeocode(lat, lng);
    }, (err) => alert("Unable to access location: " + err.message));
  } else {
    alert("Geolocation not supported by your browser.");
  }
});

// Create or move marker
function setMarker(lat, lng) {
  document.getElementById('latitude').value = lat;
  document.getElementById('longitude').value = lng;

  if (marker) map.removeLayer(marker);
  marker = L.marker([lat, lng]).addTo(map);
}

// Reverse geocode
async function reverseGeocode(lat, lng) {
  const res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`);
  const data = await res.json();
  fillAddressFields(data);
}

// Search functionality
const searchInput = document.getElementById('placeSearch');
const resultBox = document.getElementById('searchResults');
let timeout;

searchInput.addEventListener('input', function() {
  const query = this.value.trim();
  clearTimeout(timeout);
  if (query.length < 3) {
    resultBox.style.display = 'none';
    return;
  }
  timeout = setTimeout(async () => {
    const res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&addressdetails=1`);
    const places = await res.json();
    resultBox.innerHTML = '';
    places.slice(0, 5).forEach(p => {
      const li = document.createElement('li');
      li.className = 'list-group-item list-group-item-action';
      li.textContent = p.display_name;
      li.onclick = () => selectPlace(p);
      resultBox.appendChild(li);
    });
    resultBox.style.display = 'block';
  }, 400);
});

function selectPlace(place) {
  resultBox.style.display = 'none';
  searchInput.value = place.display_name;

  const lat = parseFloat(place.lat);
  const lng = parseFloat(place.lon);
  setMarker(lat, lng);
  map.setView([lat, lng], 15);
  fillAddressFields(place);
}

// Fill address fields
function fillAddressFields(data) {
  const addr = data.address || data;
  document.getElementById('street').value = addr.road || '';
  document.getElementById('city').value = addr.city || addr.town || addr.village || '';
  document.getElementById('state').value = addr.state || '';
  document.getElementById('pincode').value = addr.postcode || '';
}

function validateLocation() {
  const lat = document.getElementById('latitude').value;
  const lng = document.getElementById('longitude').value;
  if (!lat || !lng) {
    alert("Please select a location on the map.");
    return false;
  }
  return true;
}

</script>

