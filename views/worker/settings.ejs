<div class="container py-4">
  <h2 class="mb-4">Worker Dashboard</h2>

  <div class="row g-3">
    <!-- LEFT COLUMN -->
    <div class="col-12 col-lg-8 d-flex flex-column gap-3">

      <!-- 🧑‍🔧 PROFILE PANEL -->
      <section class="panel">
        <div class="panel-header">
          Worker Profile
          <div class="subtext">Manage your personal and business information.</div>
        </div>

        <div class="panel-body">
          <!-- Profile Header -->
          <div class="d-flex justify-content-between flex-wrap align-items-center mb-3">
            <div class="d-flex align-items-center gap-3 mb-3">
              <img id="profilePreview" src="<%= worker?.profilePhoto || '/images/logo.svg' %>"
                alt="Profile photo" class="rounded-circle border" width="72" height="72">

              <div>
                <h5 class="mb-1"><%= worker?.name || '' %></h5>
                <p class="text-secondary mb-2"><%= worker?.role ? worker.role.charAt(0).toUpperCase() + worker.role.slice(1) : '' %></p>

                <form action="/worker/settings/photo" method="POST" enctype="multipart/form-data"
                  class="d-flex gap-2 flex-wrap align-items-center" id="photoForm">
                  <input type="file" id="profilePhoto" name="profilePhoto"
                    class="form-control form-control-sm" accept="image/*" required>
                  <button type="submit" class="btn btn-sm btn-success">Update Photo</button>
                </form>
              </div>
            </div>

            <!-- Availability -->
            <div class="availability-section d-flex align-items-center">
              <label class="form-check-label availability-label me-2">Availability</label>
              <div class="form-check form-switch mb-0">
                <input class="form-check-input" type="checkbox" id="availabilityToggle" 
                  <%= worker.availability ? "checked" : "" %>>
              </div>
            </div>
          </div>

          <hr style="border-color: var(--line);">

          <!-- Personal Info -->
          <form action="/worker/settings/update" method="POST" id="profileForm" novalidate>
            <h6 class="mb-3 text-success">Personal Information</h6>
            <div class="row g-3">
              <div class="col-md-6">
                <label class="form-label">Name</label>
                <input type="text" name="name" class="form-control" 
                  value="<%= worker?.name || '' %>" required>
              </div>
              <div class="col-md-6">
                <label class="form-label">Email</label>
                <input type="email" name="email" class="form-control"
                  value="<%= worker?.email || '' %>" readonly>
              </div>
              <div class="col-md-6">
                <label class="form-label">Phone</label>
                <input type="tel" name="phone" class="form-control"
                  value="<%= worker?.phone || '' %>" readonly>
              </div>
              <div class="col-md-6">
                <label class="form-label">Company</label>
                <input type="text" name="company" class="form-control"
                  value="<%= admin?.companyName || '' %>" readonly>
              </div>
            </div>

            <hr style="border-color: var(--line);">

            <!-- Skills -->
            <h6 class="mb-3 text-success">Skills</h6>
            <input type="text" id="skillInput" class="form-control" list="skillsList" placeholder="Select a skill">
            <datalist id="skillsList">
              <% WORKER_SKILLS.forEach(skill => { %>
                <option value="<%= skill %>"></option>
              <% }) %>
            </datalist>

            <div id="selectedSkills" class="d-flex flex-wrap gap-2 mt-2">
              <% if(worker?.skills){ worker.skills.forEach(skill=> { %>
                <input type="hidden" name="skills" value="<%= skill %>">
                <span class="badge bg-success rounded-pill px-3 py-2 d-flex align-items-center">
                  <%= skill %>
                  <button type="button" class="btn-close btn-close-white ms-2" data-skill="<%= skill %>"></button>
                </span>
              <% }) } %>
            </div>
            <div class="form-text text-secondary">Select skills from the list. Already chosen skills appear below.</div>

            <div class="text-end mt-3">
              <button type="submit" class="btn btn-success">Save Changes</button>
            </div>
          </form>
        </div>
      </section>
    </div>

    <!-- RIGHT COLUMN -->
    <div class="col-12 col-lg-4">
      <section class="panel h-100">
        <div class="panel-header">
          Security Settings
          <div class="subtext">Update your password regularly for better protection.</div>
        </div>

        <div class="panel-body">
          <form action="/worker/settings/password" method="POST" id="passwordForm" novalidate>
            <div class="mb-3">
              <input type="password" name="currentPassword" class="form-control"
                placeholder="Current Password" required>
            </div>
            <div class="mb-3">
              <input type="password" name="newPassword" id="newPassword" class="form-control"
                placeholder="New Password" minlength="8" required>
            </div>
            <div class="mb-3">
              <input type="password" name="confirmNewPassword" id="confirmNewPassword" class="form-control"
                placeholder="Confirm New Password" required>
            </div>
            <button type="submit" class="btn btn-success w-100">Change Password</button>
          </form>
        </div>
      </section>
    </div>
  </div>
</div>


<style>
  body { background: var(--bg); color: var(--txt); }

  .panel {
    background: var(--panel);
    border: 1px solid var(--line);
    border-radius: 12px;
    box-shadow: 0 6px 22px rgba(0,0,0,0.35);
  }

  .panel-header {
    padding: 12px 14px;
    background: var(--row);
    border-bottom: 1px solid var(--line);
    border-radius: 12px 12px 0 0;
    font-weight: 600;
    color: var(--green);
  }

  .panel-body { padding: 16px; }

  .subtext { color: var(--muted); font-size: 12px; }

  .form-control, .form-select {
    background: var(--row);
    border: 1px solid var(--line);
    color: var(--txt);
  }

  .form-control:focus, .form-select:focus {
    border-color: var(--focus);
    box-shadow: 0 0 0 .2rem rgba(22, 218, 100, .15);
  }

  .btn-success {
    background: rgba(34,197,94,.18);
    color: var(--green);
    border: 1px solid rgba(34,197,94,.35);
  }
  .btn-success:hover { background: rgba(34,197,94,.28); }

  .badge.bg-success {
    background: rgba(34,197,94,.18) !important;
    color: var(--green);
    border: 1px solid rgba(34,197,94,.35);
  }

  .btn-close-white { filter: invert(1); }

  /* Availability toggle style */
  .form-switch .form-check-input {
    width: 3em;
    height: 1.6em;
    cursor: pointer;
  }

  .form-switch .form-check-input:checked {
    background-color: var(--green);
    border-color: var(--green);
  }
</style>


<script>
    document.getElementById("availabilityToggle").addEventListener("change", async function () {
        const available = this.checked;

        try {
            const res = await fetch("/worker/settings/availability", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ available })
            });
            const data = await res.json();

            if (!data.success) {
                alert("Failed to update availability!");
                this.checked = !available; // rollback
            }
        } catch (err) {
            console.error(err);
            alert("Error updating availability!");
            this.checked = !available; // rollback
        }
    });

    const params = new URLSearchParams(location.search);
    const success = params.get('success');
    const error = params.get('error');


    if (success) {
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: success,
            confirmButtonText: 'OK',
            timer: 1800,
            timerProgressBar: true
        }); // docs examples use icon/title/text options. [web:66]
    } else if (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error,
            confirmButtonText: 'OK'
        }); // standard error modal pattern. [web:66]
    }

    // Preview selected profile photo
    const fileInput = document.getElementById('profilePhoto');
    const previewImg = document.getElementById('profilePreview');
    if (fileInput) {
        fileInput.addEventListener('change', (e) => {
            const f = e.target.files && e.target.files[0];
            if (!f) return;
            if (!f.type.startsWith('image/')) {
                e.target.value = '';
                return alert('Please select an image file.');
            }
            const reader = new FileReader();
            reader.onload = (ev) => previewImg.src = ev.target.result;
            reader.readAsDataURL(f);
        });
    }

    // Bootstrap-like custom validation
    function enhanceValidation(form, onOk) {
        form.addEventListener('submit', (e) => {
            // basic HTML5 validity
            if (!form.checkValidity()) {
                e.preventDefault();
                e.stopPropagation();
                [...form.querySelectorAll(':invalid')][0]?.focus();
            } else {
                onOk?.();
            }
            form.classList.add('was-validated');
        });
    }


  const skillInput = document.getElementById('skillInput');
    const selectedSkills = document.getElementById('selectedSkills');
        const profileForm = document.getElementById('profileForm');


    skillInput.addEventListener('change', function () {
        const skill = this.value.trim();
        if (!skill) return;

        // Check if chosen skill is from WORKER_SKILLS
        const available = [...document.querySelectorAll('#skillsList option')].map(o => o.value);
        if (!available.includes(skill)) {
            this.value = '';
            return;
        }

        // Prevent duplicates
        if ([...selectedSkills.querySelectorAll('input[name="skills"]')]
            .some(input => input.value.toLowerCase() === skill.toLowerCase())) {
            this.value = '';
            return;
        }

        // Hidden input for form submit
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'skills';
        hiddenInput.value = skill;

        profileForm.appendChild(hiddenInput);

        // Badge with remove button
        const badge = document.createElement('span');
        badge.className = 'badge bg-success rounded-pill px-3 py-2 d-flex align-items-center';
        badge.innerHTML = `
            ${skill}
            <button type="button" class="btn-close btn-close-white ms-2" data-skill="${skill}"></button>
        `;
        

        selectedSkills.appendChild(badge);
        this.value = '';
    });

    // Remove skill on close click
    selectedSkills.addEventListener('click', function (e) {
  if (e.target.classList.contains('btn-close')) {
    const badge = e.target.closest('span');
    const value = badge.textContent.trim();
    
    // Remove hidden input from form
    const hiddenInput = profileForm.querySelector(`input[name="skills"][value="${value}"]`);
    if (hiddenInput) hiddenInput.remove();

    badge.remove();
  }
});
  

    // Password matching
  const newPwd = document.getElementById('newPassword');
  const confirmPwd = document.getElementById('confirmNewPassword');
  const form = document.getElementById('passwordForm');

  function checkMatch() {
    if (confirmPwd.value && newPwd.value !== confirmPwd.value) {
      confirmPwd.setCustomValidity('Passwords do not match');
      confirmPwd.reportValidity(); // immediately show the warning
    } else {
      confirmPwd.setCustomValidity('');
    }
  }

  newPwd?.addEventListener('input', checkMatch);
  confirmPwd?.addEventListener('input', checkMatch);

  // Optional: also recheck before submission
  form?.addEventListener('submit', function (e) {
    checkMatch();
    if (!form.checkValidity()) {
      e.preventDefault(); // stop submit if invalid
    }
  });


</script>